import asyncio
from datetime import datetime
from aiogram import Bot
from sqlalchemy.orm import Session
from sqlalchemy import select
from models import Product, Review
from database import SessionLocal
from wildberries_api import get_product_reviews

CHECK_INTERVAL_SECONDS = 30 * 60


async def check_for_new_reviews(bot: Bot):
    while True:
        print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤...")
        db: Session = SessionLocal()
        try:
            products = db.execute(select(Product)).scalars().all()

            if not products:
                print("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

            for product in products:
                print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä: '{product.name}' (–∞—Ä—Ç–∏–∫—É–ª: {product.article})")
                reviews = await get_product_reviews(product.article, days_ago=3)

                if not reviews:
                    print(f"–î–ª—è —Ç–æ–≤–∞—Ä–∞ {product.article} –Ω–æ–≤—ã—Ö –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

                for review_data in reviews:
                    existing_review = db.execute(
                        select(Review).filter_by(external_id=review_data['external_id'])
                    ).scalar_one_or_none()

                    if not existing_review:
                        new_review = Review(
                            product_id=product.id,
                            external_id=review_data['external_id'],
                            rating=review_data['rating'],
                            text=review_data['text'],
                            author=review_data['author'],
                            review_date=review_data['review_date'],
                            is_notified=False
                        )
                        db.add(new_review)
                        db.commit()
                        db.refresh(new_review)

                        notification_text = (
                            f"üî¥ –ù–æ–≤—ã–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤!\n"
                            f"–¢–æ–≤–∞—Ä: {product.name}\n"
                            f"–û—Ü–µ–Ω–∫–∞: {'‚≠ê' * new_review.rating} ({new_review.rating}/5)\n"
                            f"–û—Ç–∑—ã–≤: \"{new_review.text}\"\n"
                            f"–ê–≤—Ç–æ—Ä: {new_review.author}\n"
                            f"–î–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞: {new_review.review_date.strftime('%d.%m.%Y %H:%M')}"
                        )

                        print(f"--- [–£–í–ï–î–û–ú–õ–ï–ù–ò–ï] –ù–æ–≤—ã–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤ –¥–ª—è '{product.name}' ---")
                        print(notification_text)
                        new_review.is_notified = True
                        db.commit()
                        print(
                            f"–ù–æ–≤—ã–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤ –¥–ª—è {product.name} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–π.")
                    else:
                        print(
                            f"DEBUG_SCHEDULER: –û—Ç–∑—ã–≤ {review_data['external_id']} –¥–ª—è {product.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î.")
        except Exception as e:
            print(f"ERROR_SCHEDULER: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–æ–≤: {e}")
            db.rollback()
        finally:
            db.close()

        print(
            f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –ó–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–µ–º {CHECK_INTERVAL_SECONDS / 60} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        await asyncio.sleep(CHECK_INTERVAL_SECONDS)