import asyncio
from datetime import datetime
from aiogram import Bot
from sqlalchemy.orm import Session
from sqlalchemy import select
from models import Product, Review
from database import SessionLocal
from wildberries_api import get_product_reviews

CHECK_INTERVAL_SECONDS = 30 * 60 # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: 30 –º–∏–Ω—É—Ç

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–æ–≤.
async def check_for_new_reviews(bot: Bot):
    while True:
        print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤...")
        db: Session = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º.
            products = db.execute(select(Product)).scalars().all()

            if not products: # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç
                print("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

            for product in products: # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É
                print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä: '{product.name}' (–∞—Ä—Ç–∏–∫—É–ª: {product.article})")
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è.
                reviews = await get_product_reviews(product.article, days_ago=3)

                if not reviews: # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
                    print(f"–î–ª—è —Ç–æ–≤–∞—Ä–∞ {product.article} –Ω–æ–≤—ã—Ö –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

                for review_data in reviews: # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –æ—Ç–∑—ã–≤—É
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –æ—Ç–∑—ã–≤ —É–∂–µ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
                    existing_review = db.execute(
                        select(Review).filter_by(external_id=review_data['external_id'])
                    ).scalar_one_or_none()

                    if not existing_review: # –ï—Å–ª–∏ –æ—Ç–∑—ã–≤ –Ω–æ–≤—ã–π
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ–± –æ—Ç–∑—ã–≤–µ.
                        new_review = Review(
                            product_id=product.id,
                            external_id=review_data['external_id'],
                            rating=review_data['rating'],
                            text=review_data['text'],
                            author=review_data['author'],
                            review_date=review_data['review_date'],
                            is_notified=False # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                        )
                        db.add(new_review)
                        db.commit()
                        db.refresh(new_review)

                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
                        notification_text = (
                            f"üî¥ –ù–æ–≤—ã–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤!\n"
                            f"–¢–æ–≤–∞—Ä: {product.name}\n"
                            f"–û—Ü–µ–Ω–∫–∞: {'‚≠ê' * new_review.rating} ({new_review.rating}/5)\n"
                            f"–û—Ç–∑—ã–≤: \"{new_review.text}\"\n"
                            f"–ê–≤—Ç–æ—Ä: {new_review.author}\n"
                            f"–î–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞: {new_review.review_date.strftime('%d.%m.%Y %H:%M')}"
                        )

                        print(f"--- [–£–í–ï–î–û–ú–õ–ï–ù–ò–ï] –ù–æ–≤—ã–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤ –¥–ª—è '{product.name}' ---")
                        print(notification_text)
                        new_review.is_notified = True # –ü–æ–º–µ—á–∞–µ–º –æ—Ç–∑—ã–≤ –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–π.
                        db.commit()
                        print(
                            f"–ù–æ–≤—ã–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤ –¥–ª—è {product.name} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–π.")
                    else:
                        print(
                            f"DEBUG_SCHEDULER: –û—Ç–∑—ã–≤ {review_data['external_id']} –¥–ª—è {product.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î.")
        except Exception as e: # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            print(f"ERROR_SCHEDULER: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–æ–≤: {e}")
            db.rollback() # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        finally:
            db.close() # –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

        print(
            f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –ó–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–µ–º {CHECK_INTERVAL_SECONDS / 60} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        await asyncio.sleep(CHECK_INTERVAL_SECONDS)